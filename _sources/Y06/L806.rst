Филтрирање и претраживање
================================

У овој лекцији ћемо сазнати

1. како се филтрирају низови употребом посебне Пајтонове конструкције,
2. како се низови података филтрирају „пешке“ и зашто је важно да и ову вештину поседујемо и
3. како се тражи елемент у низу.

Филтрирање података употребом Пајтонове конструкције
------------------------------------------------------

*Филтрирати податке* значи из датог низа података издвојити оне који су нам на неки начин интересантни.
Програмски језик Пајтон има уграђену конструкцију (list comprehension) која омогућује да филтрирамо неки низ података у односу на неки услов.

Филтрирање низа ``L`` у односу на неки услов се може постићи конструкцијом која изгледа овако:

.. code-block:: python

    [x for x in L if Uslov(x)]
    
Ова конструкција у нови низ покупи све елементе ``x`` низа ``L`` који испуњавају ``Uslov``. То је као кад у математици напишемо:

.. math::

  \{x \mid x \in \mathrm{L} \land \mathrm{Uslov}(x) \}

Пример.
''''''''

Из низа бројева ``A = [-1, 2, 3, 0, -3, 4, -2, -5, 3, 0, 6]`` издвојити све позитивне бројеве у нови низ. Потом утврдити колико
низ ``А`` има негативних елемената.

.. activecode:: primer6-1
   :includesrc: _src/P06/Poz_neg.py

.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Poz_neg.py``.

   
   
Пример.
''''''''

Написати Пајтон функцију која из низа стрингова издваја оне који имају највише пет слова.

.. activecode:: primer6-2
   :includesrc: _src/P06/Maks_5_slova.py

.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Maks_5_slova.py``.



Пример.
''''''''

Ево података о једној групи ученика:

.. code-block:: python

   razred = [["Ana",     "ž", 13, 46, 160],
             ["Bojan",   "m", 14, 52, 165],
             ["Vlada",   "m", 13, 47, 157],
             ["Gordana", "ž", 15, 54, 165],
             ["Dejan",   "m", 15, 56, 163],
             ["Đorđe",   "m", 13, 45, 159],
             ["Elena",   "ž", 14, 49, 161],
             ["Žaklina", "ž", 15, 52, 164],
             ["Zoran",   "m", 15, 57, 167],
             ["Ivana",   "ž", 13, 45, 158],
             ["Jasna",   "ž", 14, 51, 162]]

За сваког ученика су наведени име, пол, старост (у годинама), маса (у килограмима) и висина (у центиметрима).
Издвојити у један низ дечаке, а у други девојчице које имају 13 или 14 година.

.. activecode:: primer6-3
   :includesrc: _src/P06/Decaci_devojcice.py


.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Decaci_devojcice.py``.

   Ево и кратке видео-демонстрације:
   
   .. ytpopup:: vHlu3ZJE8ow
      :width: 735
      :height: 415
      :align: center


Филтрирање података „пешке“
---------------------------

Сада ћемо показати како се из низа података могу издвојити елементи који задовољавају неки услов,
али овај пут *без употребе* специјалне Пајтонове конструкције ``[x for x in L if Uslov(x)]``
коју смо користили у претходном одељку.

Идеја је једноставна:

1. Направимо нови празан низ који ће бити помоћни низ; он ће временом акумулирати све елементе низа који задовољавају наведени услов;
2. ``for`` циклусом прођемо кроз низ; и
3. елементе који задовољавају наведени услов додамо на помоћни низ.

Пример.
''''''''

Написати Пајтон функцију ``izdvoj_pozitivne`` која из датог низа бројева издваја све позитивне бројеве.

.. activecode:: primer6-4
   :includesrc: _src/P06/Izdvoj_pozitivne.py

.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Izdvoj_pozitivne.py``.


Да се подсетимо:

1. наредба ``rez = []`` поставља помоћни низ ``rez`` на празан низ, који се означава овако: ``[]``;
2. наредба ``rez.append(x)`` на крај низа ``rez`` додаје ``x`` као нови елемент.

Када филтрирање напишемо „пешке“ то нам омогућује да лако решимо неке проблеме које иначе не бисмо брзо и елегантно
могли да решимо употребом уграђене Пајтонове конструкције за филтрирање.

Пример.
'''''''''

Написати Пајтон функцију ``pozicije_pozitivnih`` која за дати низ бројева враћа индексе елемената који су позитивни.

.. activecode:: primer6-5
   :includesrc: _src/P06/Pozicije_pozitivnih.py

.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Pozicije_pozitivnih.py``.

   Ево и кратке видео-демонстрације:
   
   .. ytpopup:: zDrQeHGrdbE
      :width: 735
      :height: 415
      :align: center


Пошто су нам за овај задатак потребне позиције позитивних бројева, дакле, индекси кућица у којима су
смештени позитивни бројеви, кроз низ пролазимо на други начин!
Овај пут променљива ``i`` пролази кроз редне бројеве кућица, па ако је ``L[i] > 0`` (тј. ако i-та кућица садржи
позитиван број) на низ ``rez`` дописујемо *њен индекс* ``i``.

Тражење елемента у низу
--------------------------

Тражење првог елемента са одређеном вредношћу у листи можемо да урадимо брзо помоћу функције ``.index()`` коју примењујемо на листу и која за аргумент узима тражену вредност. L.index(x) она враћа индекс првог елемента са вредношћу x у листи L.

.. activecode:: trazenje1 
   :nocodelens:

   a = [3,4,5,4,5,6].index(4)
   print(a)

Уколико желимо појављивање одређене вредности у делу листе који почиње индексом ``s``, онда то наведемо као други аргумент функције. То може да нам врати друго, треће итд. појављивање ове вредности.
Пример

.. activecode:: trazenje2
   :nocodelens:

   a = [3,4,5,4,5,6].index(4,2)
   print(a)

У наставку ћемо, вежбе ради, пробати да решимо сличне задатке писањем једноставних програма у Пајтону без коришћења функције ``.index()``.

Оператор ``in``

Често је потребно проверити да ли се неки елемент налази у низу, и ако се налази у низу, на ком месту се јавља.
У Пајтону је веома лако проверити да ли се неки елемент налази у низу користећи уграђени оператор ``in``.
Ево примера.

.. activecode:: primer6-6

   A = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
   print(20 in A)
   print(19 in A)

Ако желимо да одредимо где се у низу неки елемент појављује први пут, написаћемо функцију која то ради за нас.
Функција ``prvo_pojav(x, L)`` тражи прво појављивање елемента ``x`` у низу ``L``. Ако се елемент ``x`` не јавља у низу ``L``,
функција враћа -1.

.. activecode:: primer6-7
   :includesrc: _src/P06/Prvo_pojav.py

.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Prvo_pojav.py``.


Ова функција користи ``for`` циклус да би прошла кроз елементе низа.

1. У сваком пролазу кроз ``for`` циклус проверавамо да ли је одговарајући елемент низа једнак са ``x``.
   Ако је то тачно, вратимо вредност бројача, што је индекс првог појављивања елемента ``x`` у низу ``L``.
2. Ако се ``for`` циклус заврши, то значи да нисмо нашли елемент ``x`` у низу ``L`` па функција враћа -1.

Ево и кратке видео-демонстрације:

.. ytpopup:: 9BwJOaXlEX0
   :width: 735
   :height: 415
   :align: center

Функција ``posl_pojav(x, L)`` тражи последње појављивање елемента ``x`` у низу ``L``.
Ако се елемент ``x`` не јавља у низу ``L`` функција враћа -1.

.. activecode:: primer6-8
   :includesrc: _src/P06/Posl_pojav.py

.. technicalnote::

   Изврши исти програм и у Пајтон окружењу!
   
   Покрени овај програм на свом рачунару тако што ћеш у `фолдеру за рад офлајн <https://github.com/Petlja/revizija_2_radni/archive/refs/heads/main.zip>`_, покренути *IDLE* и из потфолдеру ``P06`` извршити програм ``Posl_pojav.py``.


Ова функција се заснива на чињеници да је последње појављивање елемента у низу заправо *прво када се кроз низ пролази здесна улево*.
Ту нам је од помоћи функција ``reversed`` која обрће низ који јој је прослеђен
::

              range(n) ->  0, 1, 2, ..., n-1
    reversed(range(n)) ->  n-1, n-2, ..., 1, 0

Дакле, у ``for`` циклусу ћемо овај пут кренути од крајње десне кућице у низу и кроз њега пролазити крећући се улево.

Ево и кратке видео-демонстрације:

.. ytpopup:: EzUSr0PvgGc
   :width: 735
   :height: 415
   :align: center

