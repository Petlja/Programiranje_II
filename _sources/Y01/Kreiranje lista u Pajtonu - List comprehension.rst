Креирање листа у Пајтону уз помоћ конструкције *list comprehension*
-------------------------------------------------------------------

Листе елемената постоје у многим програмским језицима. Најједноставнији
начин да направите листу је да вредности елемената листе наведете ручно,
односно да их укуцате. На пример, листа бројева мањих од 20 који су
дељиви са 3 може да се дефинише овако:

.. activecode:: lista
    :nocodelens:
    
    d3=[3,6,9,12,15,18]
    print(d3)

Што је дужа и сложенија листа, теже нам је да укуцамо податке. Штавише,
могућност грешке постаје све већа. Много је боље да овакав једноставан
задатак поверимо рачунару, тј. да напишемо програм који ће направити
листу. То можемо да урадимо на следећи начин:

.. activecode:: lista_petlja
    :nocodelens:

    d3=[]                  # prvo promenljivoj pridružujemo praznu listu
    for i in range(1,21):  # zapamtite da range(a,b) uzima vrednosti od a do b-1 
        if i%3==0:         # operator % nam daje ostatak pri deljenju dva cela broja pa proveravamo da li je ostatak nula
            d3.append(i)   # konačno, listi pridružujemo tekuću vrednost izraza ako je uslov ispunjen
    print(d3)

Биле су нам потребне четири линије кôда да напишемо програм који прави
тражену листу, али тако аутоматизујемо посао. Уместо 21 бисмо могли, на
пример, да ставимо 2021. Програм за то би и даље био дуг четири линије,
а завршио би посао који бисмо “пешке” укуцавали пола сата.

Овакав начин креирања листе је уобичајен за све програмске језике.
Синтакса може да буде мало другачија, али структура програма мора да
буде иста. Пајтон је посебан по томе што има и посебну конструкцију која
омогућава да листе креирамо једноставније. Та се конструкција на
енглеском зове **list comprehension**. Она омогућава да цео програм, у
поједностављеној варијанти, ставимо унутар угластих заграда и тако у
једној линији креирамо листу.

.. activecode:: komprehensija
    :nocodelens:

    d3=[i for i in range(1,21) if i%3==0]
    print(d3)

Приметите структуру кôда. У угластим заградама имамо прво израз (``i``)
чија се вредност придружује листи, па петљу кроз коју се мења вредност
индекса (``for i in range(1,21)``) и на крају услов који је неопходан да
би се тај елемент придружио листи (``if i%3==0``). У ``for`` петљи не
мора да се појави ``range()`` као колекција бројева. Уместо
``range(1,21)`` смо могли да ставимо и листу
``[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]``. Петља би онда
пролазила кроз листу и проверавала да ли се индекс ``i`` налази у листи.
Свеједно, први начин је лакши и елегантнији.

Да пробамо сада како ова конструкција ради на једном једноставнијем
примеру. Направићемо листу квадрата свих природних бројева од 1 до 100.
Овде нема услова већ за сваку вредност индекса ``i`` листи ``kvad``
придружујемо по једну вредност израза ``i**2``.

.. activecode:: kvadrat_liste
    :passivecode: true

    kvad=[i**2 for i in range(1,101)]

Да преведемо шта смо тачно написали у претходној ћелији: листи ``kvad``
придружи квадрат броја ``i`` за сваку вредност ``i`` од 1 до 100. Ако
вам је до сада то промакло, степен броја у Пајтону се добија помоћу
опратора ``**``. Тако је ``5**2`` једнако 25, док је ``2**3`` једнако 8.

Да бисмо проверили шта се налази у листи ``kvad``, одштампаћемо
вредности првих 15 елемената.

.. activecode:: kvadrat_15_prints
    :include: kvadrat_liste
    
    print(kvad[:15])

Слично можемо да радимо и са листама у којима су стрингови. Ево једног
примера.

.. activecode:: string
    :passivecode: true

    string='Slično možemo da radimo i sa listama u kojima su stringovi. Evo jednog primera.'
    delovi=string.split()

Уз помоћ метoде ``split()`` смо текст из претходне ћелије (променљива
``string``) поделили на делове и придружили листи ``lista``.

.. activecode:: print_string
    :include: string
    
    print(delovi)
  

Сада ћемо уз помоћ Пајтонове конструкције за листе креирати листу која
садржи само оне елементе чије вредности имају тачно 6 знакова. Можете ли
ово да урадите сами?

.. code:: ipython3

    delovi6=[s for s in delovi if len(s)==6]
    print(delovi6)

Користите овај “пајтоновски” начин креирања листа кад год можете, јер је
једноставан и разумљив (а и ефикаснији од експлицитне петље). Провежбајте 
задатке на ову тему из збирке.

